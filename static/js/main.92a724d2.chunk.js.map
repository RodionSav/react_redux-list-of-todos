{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialStatus","status","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","className","TodoList","useState","isLoading","setIsLoading","dispatch","selectedTodo","find","id","useEffect","response","todosActions","finally","filteredTodos","useMemo","preparedTodos","completed","title","toLowerCase","includes","length","map","cn","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","TodoModal","user","setUser","userId","href","email","name","App","newTodos","todoActions","catch","e","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92a724d2.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/STATUS',\n  payload: Status,\n};\n\ntype SetQueryAction = {\n  type: 'filter/QUERY',\n  payload: string,\n};\n\ntype ClearQuery = {\n  type: 'filter/CLEAR'\n};\n\ntype State = {\n  status: string,\n  query: string,\n};\n\ntype Actions = SetStatusAction\n| SetQueryAction\n| ClearQuery;\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\nconst clearQuery = (): ClearQuery => ({ type: 'filter/CLEAR' });\n\nconst initialStatus = {\n  status: 'all',\n  query: '',\n};\n\nconst filterReducer = (state: State = initialStatus, action: Actions) => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/CLEAR':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setQuery, setStatus, clearQuery };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype Action = {\n  type: 'todo/SET',\n  payload: Todo[],\n};\n\nconst set = (todos: Todo[]): Action => ({\n  type: 'todo/SET',\n  payload: todos,\n});\n\nconst todosReducer = (state: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport const actions = { set };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getTodos } from '../../api';\nimport { actions as todosActions } from '../../features/todos';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector((state) => state.todos);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const selectedTodo = todos.find(todo => currentTodo?.id === todo.id);\n\n  const handleOpenModal = (newTodo: Todo) => {\n    dispatch(currentTodoActions.setTodo(newTodo));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(response => dispatch(todosActions.set(response)))\n      .finally(() => setIsLoading(false));\n  }, [dispatch]);\n\n  const filter = useAppSelector(state => state.filter);\n  const { status, query } = filter;\n\n  const filteredTodos = useMemo(() => {\n    let preparedTodos = [...todos];\n\n    preparedTodos = preparedTodos.filter(todo => {\n      switch (status) {\n        case 'all':\n          return preparedTodos;\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return preparedTodos;\n      }\n    });\n\n    if (query) {\n      preparedTodos = preparedTodos.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    return preparedTodos;\n  }, [todos, status, query]);\n\n  return (\n    <>\n      {!filteredTodos.length && !isLoading && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n\n      {filteredTodos.length > 0 && !isLoading && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th aria-label=\"title\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th aria-label=\"title\" />\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.length && filteredTodos.map((todo) => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={cn({ 'has-background-info-light': selectedTodo?.id === todo.id })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={todo.completed\n                      ? 'has-text-success' : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td aria-label=\"title\" className=\"has-text-right is-vcentered\">\n                  <button\n                    aria-label=\"button\"\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleOpenModal(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={cn('far', {\n                        'fa-eye': selectedTodo?.id !== todo.id,\n                        'fa-eye-slash': selectedTodo?.id === todo.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n  const {\n    query,\n    status,\n  } = filter;\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleClear = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={query}\n          onChange={handleQueryChange}\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query\n            && (\n              <button\n                aria-label=\"none\"\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleClear}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const [user, setUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const selectedTodo = todos.find(todo => todo.id === currentTodo?.id);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      setIsLoading(true);\n      getUser(selectedTodo.userId)\n        .then(response => setUser(response))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedTodo]);\n\n  const handleDeleteModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {!isLoading && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleDeleteModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{selectedTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* For not completed */}\n              {/* For completed */}\n              {selectedTodo?.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(newTodos => dispatch(todoActions.set(newTodos)))\n      .catch((e) => {\n        throw new Error(e);\n      });\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}